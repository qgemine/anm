__author__ = 'Quentin Gemine'

from numpy import array
import numpy as np
from scipy.stats import multivariate_normal

class WindSampler(object):
    def __init__(self):
        self.past = []
        ##
        self.pi = self._trans_weights.tolist()
        self.mu_a = [np.atleast_1d(self._trans_means[k,-1]) for k in range(self.mixt_size)]
        self.mu_b = [np.atleast_1d(self._trans_means[k,:-1:]) for k in range(self.mixt_size)]
        ##
        sig = [self._trans_covars[k,::,::] for k in range(self.mixt_size)]
        sig_bb = [np.atleast_2d(s[:-1:,:-1:]) for s in sig]
        self.mvns = [multivariate_normal(mean=m_b,cov=s_bb) for (m_b,s_bb) in zip(self.mu_b,sig_bb)]
        ##
        lamb = [np.linalg.inv(self._trans_covars[k,::,::]) for k in range(self.mixt_size)]
        lamb_aa = [np.atleast_2d(l[-1,-1]) for l in lamb]
        lamb_ab = [np.atleast_2d(l[-1,:-1:]) for l in lamb]
        self.cond_mu_prec = [np.linalg.inv(l_aa).dot(l_ab) for (l_aa,l_ab) in zip(lamb_aa,lamb_ab)]
        self.cond_sigsqrt = [np.sqrt(np.linalg.inv(l_aa)) for l_aa in lamb_aa]

    def __call__(self, rng, *_):
        if self.past:
            if self.stds[self._t%self.T] > 0.:
                x_b = np.array(self.past)
                pi_k = [p*mvn.pdf(x_b) for (p,mvn) in zip(self.pi,self.mvns)]
                cond_pi = [p_k/sum(pi_k) for p_k in pi_k]
                cond_mu = [m_a - prec.dot(x_b-m_b) for (m_a,prec,m_b) in zip(self.mu_a,self.cond_mu_prec,self.mu_b)]
                cum_cond_pi = np.array([sum(cond_pi[:k:]) for k in range(self.mixt_size)])
                rand_k = (cum_cond_pi < rng.rand()).nonzero()[0][-1]
                x_a = self.cond_sigsqrt[rand_k]*rng.randn()+cond_mu[rand_k]

                self.past = self.past[1::] + [x_a[0,0]]
                self._t = (self._t+1) % self.T
            else:
                self.past = self.past[1::] + [0.0]
                self._t = (self._t+1) % self.T
        else:
            self._t = 1 % self.T
            norm_id = np.nonzero(np.cumsum([0.]+self._init_weights.tolist())[:-1:] <= rng.random_sample())[0][-1]
            self.past = rng.multivariate_normal(self._init_means[norm_id],self._init_covars[norm_id]).tolist()

        self.past[-1] = max(self.past[-1], (self._lb-self.means[self._t])/np.abs(self.stds[self._t]))
        return self.past[-1]*np.abs(self.stds[self._t])+self.means[self._t]

    _init_covars = array([[[ 0.9980685 ,  0.98523045],
                           [ 0.98523045,  0.99800488]]])
    _init_means = array([[-0.00123777, -0.00145859]])
    _init_weights = array([ 1.])
    _trans_covars = array([[[ 0.9980685 ,  0.98523045,  0.96653212],
                            [ 0.98523045,  0.99800488,  0.98517984],
                            [ 0.96653212,  0.98517984,  0.99827648]]])
    _trans_means = array([[-0.00123777, -0.00145859, -0.00184985]])
    _trans_weights = array([ 1.])
    _lb = 0.0
    stds = array([ 3.43609542])
    means = array([ 8.34519607])
    mixt_size = 1
    order = 2
    T = 1

class SunSampler(object):
    def __init__(self):
        self.past = []
        ##
        self.pi = self._trans_weights.tolist()
        self.mu_a = [np.atleast_1d(self._trans_means[k,-1]) for k in range(self.mixt_size)]
        self.mu_b = [np.atleast_1d(self._trans_means[k,:-1:]) for k in range(self.mixt_size)]
        ##
        sig = [self._trans_covars[k,::,::] for k in range(self.mixt_size)]
        sig_bb = [np.atleast_2d(s[:-1:,:-1:]) for s in sig]
        self.mvns = [multivariate_normal(mean=m_b,cov=s_bb) for (m_b,s_bb) in zip(self.mu_b,sig_bb)]
        ##
        lamb = [np.linalg.inv(self._trans_covars[k,::,::]) for k in range(self.mixt_size)]
        lamb_aa = [np.atleast_2d(l[-1,-1]) for l in lamb]
        lamb_ab = [np.atleast_2d(l[-1,:-1:]) for l in lamb]
        self.cond_mu_prec = [np.linalg.inv(l_aa).dot(l_ab) for (l_aa,l_ab) in zip(lamb_aa,lamb_ab)]
        self.cond_sigsqrt = [np.sqrt(np.linalg.inv(l_aa)) for l_aa in lamb_aa]

    def __call__(self, rng, *_):
        if self.past:
            if self.stds[self._t%self.T] > 0.:
                x_b = np.array(self.past)
                pi_k = [p*mvn.pdf(x_b) for (p,mvn) in zip(self.pi,self.mvns)]
                cond_pi = [p_k/sum(pi_k) for p_k in pi_k]
                cond_mu = [m_a - prec.dot(x_b-m_b) for (m_a,prec,m_b) in zip(self.mu_a,self.cond_mu_prec,self.mu_b)]
                cum_cond_pi = np.array([sum(cond_pi[:k:]) for k in range(self.mixt_size)])
                rand_k = (cum_cond_pi < rng.rand()).nonzero()[0][-1]
                x_a = self.cond_sigsqrt[rand_k]*rng.randn()+cond_mu[rand_k]

                self.past = self.past[1::] + [x_a[0,0]]
                self._t = (self._t+1) % self.T
            else:
                self.past = self.past[1::] + [0.0]
                self._t = (self._t+1) % self.T
        else:
            self._t = 1 % self.T
            norm_id = np.nonzero(np.cumsum([0.]+self._init_weights.tolist())[:-1:] <= rng.random_sample())[0][-1]
            self.past = rng.multivariate_normal(self._init_means[norm_id],self._init_covars[norm_id]).tolist()

        self.past[-1] = max(self.past[-1], (self._lb-self.means[self._t])/np.abs(self.stds[self._t]))
        return self.past[-1]*np.abs(self.stds[self._t])+self.means[self._t]

    _init_covars = array([[[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]]])

    _init_means = array([[ 0.],
                         [ 0.],
                         [ 0.],
                         [ 0.],
                         [ 0.],
                         [ 0.],
                         [ 0.],
                         [ 0.],
                         [ 0.],
                         [ 0.]])

    _init_weights = array([ 0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1])
    _trans_covars = array([[[  5.29100468e-02,   4.66281365e-02],
                             [  4.66281365e-02,   5.10545396e-02]],
                            [[  1.53924113e-01,   6.06826425e-02],
                             [  6.06826425e-02,   1.59291273e-01]],
                            [[  3.52882499e-03,   2.08833085e-01],
                             [  2.08833085e-01,   4.11558683e+01]],
                            [[  1.77953262e-01,   1.67298488e-01],
                             [  1.67298488e-01,   1.75761417e-01]],
                            [[  4.49351306e-01,   3.82063799e-01],
                             [  3.82063799e-01,   4.41845660e-01]],
                            [[  1.31563956e+00,   6.59913359e-01],
                             [  6.59913359e-01,   1.25197780e+00]],
                            [[  2.49434165e+01,  -9.51184357e+00],
                             [ -9.51184357e+00,   1.27500555e+01]],
                            [[  2.85754599e-03,   3.34642823e-04],
                             [  3.34642823e-04,   1.50890084e-03]],
                            [[  3.65252610e-01,  -3.54050591e-03],
                             [ -3.54050591e-03,   3.60036422e-01]],
                            [[  3.18999281e-01,   1.15548249e-01],
                             [  1.15548249e-01,   4.24810209e-01]]])

    _trans_means = array([[ 1.1610894 ,  1.16153612],
                           [-0.42594343, -0.40580988],
                           [-0.06575965,  9.59209203],
                           [-0.8371022 , -0.83968888],
                           [ 0.89737048,  0.85923023],
                           [ 1.92185264,  1.88752457],
                           [ 8.86093406,  3.75985555],
                           [-0.03663205, -0.06823992],
                           [ 0.32295457,  0.43470875],
                           [ 0.55791714,  0.44760842]])

    _trans_weights = array([ 0.10494789,  0.10373561,  0.00184417,  0.30592703,  0.09581995,
        0.01680253,  0.00153294,  0.24149121,  0.06735853,  0.06054015])
    _lb = 0.0
    stds = array([  -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    7.35203771e-03,   5.20577289e-03,   5.20577289e-03,
                    1.86877317e-01,   1.33033574e+00,   2.90086215e+00,
                    4.83760849e+00,   6.85443416e+00,   9.22324885e+00,
                    1.17949634e+01,   1.49235189e+01,   1.86025651e+01,
                    2.27996804e+01,   3.00201792e+01,   3.79625379e+01,
                    4.64450706e+01,   5.62484612e+01,   6.47510658e+01,
                    7.52457584e+01,   8.88297912e+01,   9.70577675e+01,
                    1.07437127e+02,   1.15392868e+02,   1.22839999e+02,
                    1.30694962e+02,   1.37303459e+02,   1.43101902e+02,
                    1.51134119e+02,   1.57364435e+02,   1.59559197e+02,
                    1.63540560e+02,   1.65458983e+02,   1.70811420e+02,
                    1.69531199e+02,   1.70625955e+02,   1.71076639e+02,
                    1.71585633e+02,   1.68989335e+02,   1.69097880e+02,
                    1.64403697e+02,   1.59436751e+02,   1.59263700e+02,
                    1.54167132e+02,   1.46858947e+02,   1.40658867e+02,
                    1.31342777e+02,   1.26230713e+02,   1.19089048e+02,
                    1.07695584e+02,   1.01711830e+02,   9.34470763e+01,
                    8.37195605e+01,   7.24666578e+01,   5.95663897e+01,
                    4.74459322e+01,   3.92959577e+01,   3.10819135e+01,
                    2.32461361e+01,   1.75629458e+01,   1.22148387e+01,
                    8.60196434e+00,   5.34169892e+00,   3.04449254e+00,
                    1.54220390e+00,   5.18664435e-01,   1.07168623e-01,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00])

    means = array([  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     5.43478266e-04,   2.71739133e-04,   2.71739133e-04,
                     2.20108699e-02,   3.91576089e-01,   1.12146740e+00,
                     2.32690219e+00,   4.06250000e+00,   6.61793478e+00,
                     9.60597826e+00,   1.37679348e+01,   1.90021739e+01,
                     2.55527174e+01,   3.58434783e+01,   4.84067936e+01,
                     6.55644022e+01,   8.28663043e+01,   9.85875000e+01,
                     1.16502989e+02,   1.33251359e+02,   1.49025000e+02,
                     1.65901630e+02,   1.83997826e+02,   1.98446740e+02,
                     2.12201087e+02,   2.29911141e+02,   2.43180978e+02,
                     2.53504620e+02,   2.63951087e+02,   2.77215217e+02,
                     2.85099728e+02,   2.86738859e+02,   2.92647010e+02,
                     2.87558152e+02,   2.88089131e+02,   2.86698912e+02,
                     2.89261413e+02,   2.82397282e+02,   2.79711142e+02,
                     2.69864130e+02,   2.59178804e+02,   2.53844022e+02,
                     2.40000000e+02,   2.28305163e+02,   2.12461957e+02,
                     1.98610870e+02,   1.87837228e+02,   1.73866033e+02,
                     1.61081250e+02,   1.49789402e+02,   1.34022826e+02,
                     1.15208152e+02,   9.92888586e+01,   8.04752719e+01,
                     6.26869566e+01,   4.73994565e+01,   3.36380435e+01,
                     2.30119565e+01,   1.53214674e+01,   9.15054347e+00,
                     5.41521740e+00,   2.96956521e+00,   1.34429348e+00,
                     4.90760868e-01,   1.09510869e-01,   1.41304350e-02,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00])

    mixt_size = 10
    order = 1
    T = 96

class LoadSampler(object):
    def __init__(self, scaling_factor=1.0):
        self.past = []
        self.scale = scaling_factor
        ##
        self.pi = self._trans_weights.tolist()
        self.mu_a = [np.atleast_1d(self._trans_means[k,-1]) for k in range(self.mixt_size)]
        self.mu_b = [np.atleast_1d(self._trans_means[k,:-1:]) for k in range(self.mixt_size)]
        ##
        sig = [self._trans_covars[k,::,::] for k in range(self.mixt_size)]
        sig_bb = [np.atleast_2d(s[:-1:,:-1:]) for s in sig]
        self.mvns = [multivariate_normal(mean=m_b,cov=s_bb) for (m_b,s_bb) in zip(self.mu_b,sig_bb)]
        ##
        lamb = [np.linalg.inv(self._trans_covars[k,::,::]) for k in range(self.mixt_size)]
        lamb_aa = [np.atleast_2d(l[-1,-1]) for l in lamb]
        lamb_ab = [np.atleast_2d(l[-1,:-1:]) for l in lamb]
        self.cond_mu_prec = [np.linalg.inv(l_aa).dot(l_ab) for (l_aa,l_ab) in zip(lamb_aa,lamb_ab)]
        self.cond_sigsqrt = [np.sqrt(np.linalg.inv(l_aa)) for l_aa in lamb_aa]

    def __call__(self, rng, *_):
        if self.past:
            if self.stds[self._t%self.T] > 0.:
                x_b = np.array(self.past)
                pi_k = [p*mvn.pdf(x_b) for (p,mvn) in zip(self.pi,self.mvns)]
                cond_pi = [p_k/sum(pi_k) for p_k in pi_k]
                cond_mu = [m_a - prec.dot(x_b-m_b) for (m_a,prec,m_b) in zip(self.mu_a,self.cond_mu_prec,self.mu_b)]
                cum_cond_pi = np.array([sum(cond_pi[:k:]) for k in range(self.mixt_size)])
                rand_k = (cum_cond_pi < rng.rand()).nonzero()[0][-1]
                x_a = self.cond_sigsqrt[rand_k]*rng.randn()+cond_mu[rand_k]

                self.past = self.past[1::] + [x_a[0,0]]
                self._t = (self._t+1) % self.T
            else:
                self.past = self.past[1::] + [0.0]
                self._t = (self._t+1) % self.T
        else:
            self._t = 1 % self.T
            norm_id = np.nonzero(np.cumsum([0.]+self._init_weights.tolist())[:-1:] <= rng.random_sample())[0][-1]
            self.past = rng.multivariate_normal(self._init_means[norm_id],self._init_covars[norm_id]).tolist()

        self.past[-1] = max(self.past[-1], (self._lb-self.means[self._t])/np.abs(self.stds[self._t]))
        return self.scale*(self.past[-1]*np.abs(self.stds[self._t])+self.means[self._t])

    _init_covars = array([[[  1.00000000e-03,   3.12250226e-17],
                           [  3.12250226e-17,   1.00000000e-03]],
                          [[  1.00000000e-03,   1.79301018e-14],
                           [  1.79301018e-14,   1.00000000e-03]],
                          [[  1.00000000e-03,  -4.32986980e-15],
                           [ -4.31599201e-15,   1.00000000e-03]],
                          [[  1.00000000e-03,  -4.40793235e-15],
                           [ -4.40793235e-15,   1.00000000e-03]],
                          [[  2.96901305e-02,   1.57144527e-02],
                           [  1.57144527e-02,   9.60731136e-03]],
                          [[  3.01849656e-02,   2.67388632e-02],
                           [  2.67388632e-02,   3.08098685e-02]],
                          [[  6.75451383e-02,   4.73689562e-02],
                           [  4.73689562e-02,   3.47473547e-02]],
                          [[  1.00000000e-03,   1.99840144e-15],
                           [  1.88737914e-15,   1.00000000e-03]],
                          [[  3.09060601e-02,   2.85120177e-02],
                           [  2.85120177e-02,   3.35016728e-02]],
                          [[  1.00000000e-03,   9.99200722e-16],
                           [  9.99200722e-16,   1.00000000e-03]]])

    _init_means = array([[ 0.53552573,  0.02518528],
                         [-0.51794502, -0.84220591],
                         [-0.26231255, -0.25929928],
                         [-0.03983044, -0.35346313],
                         [-0.9603746 , -0.92841711],
                         [-0.4924861 , -0.068688  ],
                         [ 1.13230915,  0.77418321],
                         [ 0.74733944,  1.09433991],
                         [-0.51240773, -0.09276893],
                         [-0.51794502, -0.84220591]])

    _init_weights = array([ 0.07142857,  0.00384876,  0.07142843,  0.07142857,  0.14285731,
                            0.18343599,  0.21428572,  0.07142857,  0.10227844,  0.06757963])
    _trans_covars = array([[[1.71398346e-01,   1.60365571e-01,   7.05111053e-02],
                             [1.60365571e-01,   2.27722100e-01,   7.24066698e-02],
                             [7.05111053e-02,   7.24066698e-02,   2.77227542e-01]],
                            [[4.01404959e-01,   4.76287106e-01,   4.77508677e-01],
                             [4.76287106e-01,   6.57641883e-01,   6.67705728e-01],
                             [4.77508677e-01,   6.67705728e-01,   8.13724609e-01]],
                            [[9.15032122e-01,   4.29980492e-01,   7.71401421e-04],
                             [4.29980492e-01,   1.04408157e+00,   7.10929077e-01],
                             [7.71401421e-04,   7.10929077e-01,   1.40045083e+00]],
                            [[6.20049897e-02,   4.71772531e-02,   3.37312383e-02],
                             [4.71772531e-02,   5.42040867e-02,   4.40648545e-02],
                             [3.37312383e-02,   4.40648545e-02,   5.49418456e-02]],
                            [[6.53989394e-02,   2.45909338e-02,   4.44177156e-02],
                             [2.45909338e-02,   1.24352517e-01,   8.91563360e-02],
                             [4.44177156e-02,   8.91563360e-02,   1.82217411e-01]],
                            [[3.90855587e-01,   3.51772395e-01,   2.68806673e-01],
                             [3.51772395e-01,   4.80873481e-01,   3.52566535e-01],
                             [2.68806673e-01,   3.52566535e-01,   3.62427742e-01]],
                            [[2.55935919e-01,   1.12049390e-01,   1.58735408e-01],
                             [1.12049390e-01,   2.70472266e-01,   2.81669975e-01],
                             [1.58735408e-01,   2.81669975e-01,   3.84889016e-01]],
                            [[3.61986777e-01,   3.41019485e-01,   3.36512997e-01],
                             [3.41019485e-01,   3.71276130e-01,   3.61893976e-01],
                             [3.36512997e-01,   3.61893976e-01,   4.03491171e-01]],
                            [[1.80891904e-01,   1.33539126e-01,   1.09281727e-01],
                             [1.33539126e-01,   1.30987448e-01,   1.02896844e-01],
                             [1.09281727e-01,   1.02896844e-01,   1.30110206e-01]],
                            [[6.70654007e-01,   6.50747271e-01,   6.30880500e-01],
                             [6.50747271e-01,   6.62770150e-01,   6.44278807e-01],
                             [6.30880500e-01,   6.44278807e-01,   6.58141334e-01]]])

    _trans_means = array([[ 0.66878085,  0.62739283,  0.57268366],
                           [ 0.33054161,  0.12561098, -0.04602142],
                           [-1.83488269, -1.80534587, -1.78807269],
                           [ 0.54930921,  0.56718121,  0.58342482],
                           [-0.78040416, -0.65055492, -0.56119018],
                           [-0.0410787 ,  0.13880917,  0.4296367 ],
                           [ 0.56926998,  0.52566559,  0.41340767],
                           [ 1.48241576,  1.46521255,  1.43108068],
                           [-3.26554694, -3.25343348, -3.22360314],
                           [-0.37892788, -0.37617895, -0.37260285]])

    _trans_weights = array([ 0.03589834,  0.0504234 ,  0.00449024,  0.14205945,  0.03553133,
                              0.04232623,  0.05423524,  0.08948016,  0.01312534,  0.53243027])
    _lb = 0.0
    stds = array([ 0.07530187,  0.07311835,  0.07477758,  0.0711267 ,  0.0691166 ,
                   0.07173406,  0.07455794,  0.07638871,  0.07670439,  0.074222  ,
                   0.06535829,  0.06714898,  0.07091001,  0.07588446,  0.07657012,
                   0.07483362,  0.07467648,  0.06661832,  0.06430867,  0.07131139,
                   0.06858334,  0.06534332,  0.06258548,  0.07817794,  0.07974965,
                   0.08324608,  0.08175724,  0.08432753,  0.07315572,  0.06239249,
                   0.07028453,  0.08051153,  0.09830591,  0.11811922,  0.11900188,
                   0.11472537,  0.1061861 ,  0.12946922,  0.14613124,  0.14274836,
                   0.12830073,  0.16462803,  0.14750221,  0.13214193,  0.11529348,
                   0.11493384,  0.10888574,  0.10318241,  0.09671991,  0.09215283,
                   0.09476094,  0.09981706,  0.0973739 ,  0.10095266,  0.09348073,
                   0.09532971,  0.0934517 ,  0.10223867,  0.10204451,  0.10293153,
                   0.09598186,  0.08964338,  0.0945479 ,  0.09333562,  0.10571073,
                   0.11900902,  0.11388684,  0.11413858,  0.11375359,  0.11873482,
                   0.1312458 ,  0.14109921,  0.15713092,  0.162653  ,  0.16752443,
                   0.16735242,  0.15648655,  0.1520214 ,  0.15515846,  0.15369416,
                   0.14571052,  0.13757633,  0.13012135,  0.1163626 ,  0.10789756,
                   0.10267264,  0.09271229,  0.09822002,  0.10675559,  0.09593372,
                   0.0819933 ,  0.06997014,  0.06634419,  0.06292066,  0.05365428,
                   0.04760702])

    means = array([ 0.60663577,  0.58586914,  0.56527899,  0.54980228,  0.53370487,
                    0.51707902,  0.51212431,  0.50463799,  0.49272062,  0.48071805,
                    0.46696713,  0.46374623,  0.46405474,  0.45703973,  0.45455831,
                    0.45546812,  0.45868123,  0.45679813,  0.46162764,  0.47039958,
                    0.4751894 ,  0.48120716,  0.50080234,  0.54015499,  0.58909487,
                    0.62033166,  0.65738681,  0.68965282,  0.73196821,  0.75166144,
                    0.73531797,  0.72579739,  0.72886826,  0.73543217,  0.73940706,
                    0.74025965,  0.74166741,  0.73072065,  0.74367321,  0.75352867,
                    0.74966236,  0.75387774,  0.75498164,  0.7679718 ,  0.77773655,
                    0.7840034 ,  0.79004263,  0.79921512,  0.78232725,  0.77845669,
                    0.78923982,  0.79572719,  0.79413751,  0.7853266 ,  0.78047954,
                    0.77336408,  0.760382  ,  0.75037442,  0.74681027,  0.74456404,
                    0.74242181,  0.7319285 ,  0.73294887,  0.73141078,  0.7265453 ,
                    0.71256925,  0.71833746,  0.73129376,  0.74542935,  0.78037769,
                    0.83974182,  0.85998419,  0.86964971,  0.8761699 ,  0.87094881,
                    0.87105588,  0.86305291,  0.84638689,  0.82922889,  0.81131029,
                    0.79600924,  0.77267105,  0.75308935,  0.74597433,  0.72788526,
                    0.71303386,  0.68695259,  0.67248466,  0.67886755,  0.69146492,
                    0.70241949,  0.69826469,  0.69541174,  0.67320626,  0.65449961,
                    0.64249931])

    mixt_size = 10
    order = 2
    T = 96