__author__ = 'Quentin Gemine'

from numpy import array
import numpy as np
from scipy.stats import multivariate_normal

class Sampler(object):
    def __init__(self, params, seas_mean=np.array([0.0]), seas_std=np.array([1.0]), T=1):
        self.mixt_size, self.order = params["means"].shape[0], params["means"].shape[1]-1
        self._covars, self._means, self._weights = params["covariances"], params["means"], params["weights"]
        self.seas_mean, self.seas_std = seas_mean, seas_std
        self.past, self.T = [], T
        ##
        self.pi = self._weights.tolist()
        self.mu_a = [np.atleast_1d(self._means[k,-1]) for k in range(self.mixt_size)]
        self.mu_b = [np.atleast_1d(self._means[k,:-1:]) for k in range(self.mixt_size)]
        ##
        sig = [self._covars[k,::,::] for k in range(self.mixt_size)]
        sig_bb = [np.atleast_2d(s[:-1:,:-1:]) for s in sig]
        self.mvns = [multivariate_normal(mean=m_b,cov=s_bb) for (m_b,s_bb) in zip(self.mu_b,sig_bb)]
        ##
        lamb = [np.linalg.inv(self._covars[k,::,::]) for k in range(self.mixt_size)]
        lamb_aa = [np.atleast_2d(l[-1,-1]) for l in lamb]
        lamb_ab = [np.atleast_2d(l[-1,:-1:]) for l in lamb]
        self.cond_mu_prec = [np.linalg.inv(l_aa).dot(l_ab) for (l_aa,l_ab) in zip(lamb_aa,lamb_ab)]
        self.cond_sigsqrt = [np.sqrt(np.linalg.inv(l_aa)) for l_aa in lamb_aa]

    def __call__(self, rng, *_):
        if self.past:
            if self.seas_std[self._t%self.T] > 0.:
                x_b = np.array(self.past)
                pi_k = [p*mvn.pdf(x_b) for (p,mvn) in zip(self.pi,self.mvns)]
                cond_pi = [p_k/sum(pi_k) for p_k in pi_k]
                cond_mu = [m_a - prec.dot(x_b-m_b) for (m_a,prec,m_b) in zip(self.mu_a,self.cond_mu_prec,self.mu_b)]
                cum_cond_pi = np.array([sum(cond_pi[:k:]) for k in range(self.mixt_size)])
                rand_k = (cum_cond_pi < rng.rand()).nonzero()[0][-1]
                x_a = self.cond_sigsqrt[rand_k]*rng.randn()+cond_mu[rand_k]

                self.past = self.past[1::] + [x_a[0,0]]
                self._t = (self._t+1) % self.T
            else:
                self.past = self.past[1::] + [self.seas_mean[self._t%self.T]]
                self._t = (self._t+1) % self.T
        else:
            self._t = 0
            norm_id = np.nonzero(np.cumsum([0.]+self._weights.tolist())[:-1:] <= rng.random_sample())[0][-1]
            self.past = rng.multivariate_normal(self._means[norm_id],self._covars[norm_id]).tolist()[1:]

        #self.past[-1] = max(self.past[-1], (self._lb-self.norm_mean[self._t])/np.abs(self.norm_std[self._t]))
        self.past[-1] = self.past[-1]
        return self.past[-1]*np.abs(self.seas_std[self._t])+self.seas_mean[self._t]

class WindSampler(Sampler):
    def __init__(self):
        seas_mean = array([ 7.10230769,  7.14557692,  7.19682234,  7.26703297,  7.3022619,
                            7.32167582,  7.3978022 ,  7.4207967 ,  7.47504121,  7.53979853,
                            7.57793956,  7.62783883,  7.67348443,  7.69576923,  7.72879121,
                            7.73085165,  7.7122848 ,  7.69960623,  7.70264652,  7.68124542,
                            7.63362179,  7.59087912,  7.5710989 ,  7.55069597,  7.51577839,
                            7.50966117,  7.49949634,  7.48149267,  7.4820696 ,  7.48410256,
                            7.45618132,  7.41360806,  7.38358974,  7.37188645,  7.35572344,
                            7.32638278,  7.26782509,  7.21837912,  7.18949634,  7.16938645,
                            7.13094322,  7.10038462,  7.04695513,  6.98548535,  6.8935348 ,
                            6.78802198,  6.66705128,  6.5627381 ,  6.48829212,  6.41807692,
                            6.33494963,  6.26477106,  6.21974359,  6.1595696 ,  6.13453755,
                            6.09591575,  6.13101648,  6.1885348 ,  6.21844322,  6.30319597,
                            6.37422161,  6.45600733,  6.52393315,  6.58090659,  6.63106227,
                            6.6725    ,  6.75477106,  6.76700549,  6.78546703,  6.78714286,
                            6.85118132,  6.87776557,  6.89828755,  6.91758242,  6.90640568,
                            6.86911172,  6.86047619,  6.84524725,  6.85699176,  6.83132784,
                            6.82247253,  6.79529304,  6.80059524,  6.80009158,  6.82820055,
                            6.83638278,  6.8414011 ,  6.85982601,  6.87851648,  6.90063187,
                            6.92124084,  6.91807692,  6.93211538,  6.98      ,  6.99505952,
                            7.04347985])
        seas_std = array([  3.30635348,  3.29310404,  3.33911388,  3.37066748,  3.33461122,
                            3.32386198,  3.29920632,  3.25815008,  3.25213929,  3.28508896,
                            3.2885952 ,  3.31157335,  3.30446398,  3.33287546,  3.35331523,
                            3.35389611,  3.33355514,  3.30864036,  3.29852544,  3.27458192,
                            3.22826621,  3.20858261,  3.19794617,  3.18036528,  3.15817977,
                            3.15093741,  3.12624025,  3.11034138,  3.11077193,  3.12829785,
                            3.13291568,  3.1551207 ,  3.16381569,  3.17577093,  3.18052526,
                            3.17280541,  3.16133601,  3.16164326,  3.17441284,  3.18151401,
                            3.16243224,  3.14821582,  3.12842651,  3.11209905,  3.08895558,
                            3.07767733,  3.09269583,  3.10319239,  3.14443745,  3.23803076,
                            3.36704825,  3.48110557,  3.53280991,  3.56514945,  3.6001883 ,
                            3.60956214,  3.64227158,  3.69157568,  3.70233654,  3.77434658,
                            3.80502529,  3.80422623,  3.8146538 ,  3.83789181,  3.805563  ,
                            3.79565006,  3.79797978,  3.79905756,  3.78176191,  3.79249276,
                            3.76328406,  3.73981476,  3.71248526,  3.69832105,  3.65236964,
                            3.62184214,  3.60335064,  3.59813429,  3.60381967,  3.61072332,
                            3.60810148,  3.62114519,  3.62487097,  3.63790978,  3.65272386,
                            3.67410633,  3.65736673,  3.6324868 ,  3.63073863,  3.65077611,
                            3.61188263,  3.5725236 ,  3.51905268,  3.48246621,  3.42381703,
                            3.35330142])
        params = {}
        params["means"] = array([  [-0.67673454, -0.67802093, -0.67428156],
                                   [ 0.46342396,  0.4620868 ,  0.45735941],
                                   [-0.19861597, -0.19333473, -0.18862399],
                                   [ 1.63501099,  1.65466302,  1.65668331],
                                   [-1.14196429, -1.14923432, -1.14660593],
                                   [ 1.45629609,  1.4733677 ,  1.47816847],
                                   [-0.17944327, -0.16974627, -0.16047557],
                                   [ 0.39934154,  0.45817765,  0.4408146 ],
                                   [-0.36377837, -0.36643156, -0.3681526 ],
                                   [ 0.08234612,  0.10921948,  0.1128962 ],
                                   [ 0.59894402,  0.5950818 ,  0.58754282],
                                   [-0.29431857, -0.25902922, -0.186807  ]])
        params["covariances"] = array([[[ 0.27767132,  0.26593996,  0.25201508],
                                        [ 0.26593996,  0.26898185,  0.26322684],
                                        [ 0.25201508,  0.26322684,  0.27245051]],
                                       [[ 0.61936257,  0.61353244,  0.60695868],
                                        [ 0.61353244,  0.61751138,  0.61450128],
                                        [ 0.60695868,  0.61450128,  0.62123911]],
                                       [[ 0.56948606,  0.51608326,  0.46256875],
                                        [ 0.51608326,  0.5931459 ,  0.55662563],
                                        [ 0.46256875,  0.55662563,  0.63730375]],
                                       [[ 0.67153601,  0.62001337,  0.55491403],
                                        [ 0.62001337,  0.70806717,  0.68247598],
                                        [ 0.55491403,  0.68247598,  0.79382754]],
                                       [[ 0.19494074,  0.18916525,  0.18153813],
                                        [ 0.18916525,  0.19249832,  0.18814534],
                                        [ 0.18153813,  0.18814534,  0.19292836]],
                                       [[ 1.08213826,  1.05472701,  1.0226358 ],
                                        [ 1.05472701,  1.05069837,  1.03215382],
                                        [ 1.0226358 ,  1.03215382,  1.03637042]],
                                       [[ 0.38210278,  0.36094331,  0.33674838],
                                        [ 0.36094331,  0.36899786,  0.36489059],
                                        [ 0.33674838,  0.36489059,  0.39025483]],
                                       [[ 1.02773838,  0.68191974,  0.38983688],
                                        [ 0.68191974,  0.8935936 ,  0.60145424],
                                        [ 0.38983688,  0.60145424,  0.87530839]],
                                       [[ 0.31638247,  0.30787375,  0.29856939],
                                        [ 0.30787375,  0.3106741 ,  0.30644676],
                                        [ 0.29856939,  0.30644676,  0.31354364]],
                                       [[ 0.70565328,  0.64505509,  0.60668003],
                                        [ 0.64505509,  0.71409686,  0.68706217],
                                        [ 0.60668003,  0.68706217,  0.78333793]],
                                       [[ 0.55779636,  0.55303529,  0.54810783],
                                        [ 0.55303529,  0.5563667 ,  0.5536266 ],
                                        [ 0.54810783,  0.5536266 ,  0.55893904]],
                                       [[ 0.56433268,  0.52641207,  0.43720372],
                                        [ 0.52641207,  0.59001654,  0.54021957],
                                        [ 0.43720372,  0.54021957,  0.6017301 ]]])
        params["weights"] = array([ 0.10251626,  0.10300555,  0.01166952,  0.00790229,  0.18046005,
                                    0.05867861,  0.06566602,  0.0056921 ,  0.13336697,  0.01033152,
                                    0.30410835,  0.01660277])
        super(WindSampler,self).__init__(params, seas_mean=seas_mean, seas_std=seas_std, T=96)

    def __call__(self, rng, *_):
        return max(0.0, super(WindSampler,self).__call__(rng))

class LoadSampler(Sampler):
    def __init__(self, scaling_factor=1.0):
        self.scale = scaling_factor
        seas_mean = array([ 109.32353095,  104.85475   ,  102.52709524,   99.92796905,
                             97.73779841,   95.61581667,   94.4419127 ,   93.45818492,
                             93.60366984,   92.66400079,   92.81769921,   91.63458413,
                             91.42644603,   91.64683889,   90.74276746,   89.4756746 ,
                             90.40229365,   91.49282857,   95.0532873 ,   97.62108254,
                            104.3230119 ,  110.4988    ,  117.31485317,  124.49126032,
                            132.58756746,  133.93614206,  135.7743746 ,  137.44251429,
                            138.03675873,  134.36230079,  132.10282222,  129.09136746,
                            126.76509921,  127.63328333,  125.19950837,  123.30188797,
                            122.90540873,  122.93218095,  123.47675317,  123.11166825,
                            122.93598492,  121.94779762,  122.36741984,  123.80311746,
                            125.25459683,  127.73385397,  128.64134921,  130.45569286,
                            130.39048413,  130.79028889,  131.21254286,  131.72374365,
                            133.88358095,  134.3866746 ,  135.44579603,  135.78679286,
                            136.65618036,  140.02171508,  141.7783119 ,  141.26562619,
                            143.7214627 ,  146.57964444,  148.68794286,  153.3172626 ,
                            160.17823757,  165.23593333,  168.67198333,  171.85663333,
                            176.40859683,  178.32543889,  181.03415317,  186.64957778,
                            189.36491746,  188.51981905,  191.8825873 ,  197.51697381,
                            203.25403095,  203.06367143,  202.75117857,  203.03912063,
                            202.25329048,  200.67197857,  197.84161429,  191.78147937,
                            192.66601984,  188.19972381,  181.5882373 ,  172.12859365,
                            162.28632778,  153.72956667,  144.34706984,  135.98527619,
                            128.8367119 ,  122.28462857,  116.98055476,  112.28321032])
        seas_std = array([  13.91155071,  13.61439705,  13.91735534,  13.05265831,
                            13.60259348,  12.99100898,  12.74003256,  11.05204554,
                            11.70885967,  11.47442234,  11.21856387,  10.7574643 ,
                            10.58247708,  11.60260091,  11.75432646,  11.70214203,
                            12.99938245,  13.60646972,  14.77941848,  16.01497898,
                            16.30164812,  18.83499573,  22.19128408,  25.00232793,
                            25.9707482 ,  25.22421434,  22.49576097,  21.43039064,
                            19.49403989,  16.73726141,  14.25744377,  14.7759316 ,
                            13.57208804,  13.73988898,  14.69437997,  15.64286211,
                            15.70267434,  15.98556527,  17.87159831,  18.12480351,
                            18.9394283 ,  18.21524375,  19.46573409,  19.53253613,
                            21.24561585,  22.51877466,  23.48918591,  23.46440582,
                            23.97118563,  25.52678853,  26.75051056,  28.21521957,
                            28.667038  ,  29.83204626,  30.19713718,  31.42132422,
                            32.25514669,  34.33211712,  36.24168643,  37.40057779,
                            40.32812066,  39.32904116,  39.90343349,  41.16091607,
                            44.4595513 ,  45.90402136,  46.93874675,  47.96479061,
                            45.96775576,  44.62955367,  44.42882924,  44.48852114,
                            43.31776927,  41.20534369,  40.11676844,  37.00425726,
                            36.25255583,  37.75891367,  36.28549505,  35.47041632,
                            33.26812493,  33.40411093,  32.40382852,  31.2105953 ,
                            29.61404829,  27.1678877 ,  26.6420258 ,  26.39619699,
                            23.37305594,  22.96199958,  20.8871798 ,  19.83857383,
                            18.66260369,  18.21826214,  16.72171548,  15.50504113])
        params = {}
        params["means"] = array([  [ 0.18636176,  0.19612484,  0.23148603,  0.33008702,  0.44959679,
                                     0.49098758],
                                   [-0.33739857, -0.34126687, -0.34435453, -0.34673263, -0.3483423 ,
                                    -0.34862462],
                                   [ 1.22475735,  1.22710476,  1.22586657,  1.2232578 ,  1.21922995,
                                     1.21218969],
                                   [ 0.01450179,  0.00605074, -0.02905561, -0.09432277, -0.14860943,
                                    -0.16587813],
                                   [-0.7591755 , -0.75184234, -0.72429883, -0.689164  , -0.65364538,
                                    -0.61331076],
                                   [ 1.63960059,  1.65568415,  1.65442222,  1.65092262,  1.65060537,
                                     1.65032342],
                                   [ 0.5224103 ,  0.55517873,  0.58355604,  0.60288491,  0.61716774,
                                     0.62403434],
                                   [ 0.37455929,  0.51467314,  0.61417485,  0.62111297,  0.50326684,
                                     0.38902553]])
        params["covariances"] = array([[[ 1.20037784,  1.16920298,  1.10252913,  0.96673318,  0.77993806,
                                          0.63256592],
                                        [ 1.16920298,  1.17782586,  1.1200011 ,  0.98079996,  0.78445611,
                                          0.61580216],
                                        [ 1.10252913,  1.1200011 ,  1.13271476,  1.01650956,  0.80605971,
                                          0.61775585],
                                        [ 0.96673318,  0.98079996,  1.01650956,  1.05013794,  0.86337884,
                                          0.62514883],
                                        [ 0.77993806,  0.78445611,  0.80605971,  0.86337884,  0.94819096,
                                          0.73531905],
                                        [ 0.63256592,  0.61580216,  0.61775585,  0.62514883,  0.73531905,
                                          0.89191828]],
                                       [[ 0.6427692 ,  0.63604347,  0.62481701,  0.61043036,  0.59423076,
                                          0.57774009],
                                        [ 0.63604347,  0.64010076,  0.63377444,  0.6228054 ,  0.60856859,
                                          0.59291616],
                                        [ 0.62481701,  0.63377444,  0.63807716,  0.63200558,  0.62123492,
                                          0.60756939],
                                        [ 0.61043036,  0.6228054 ,  0.63200558,  0.63648625,  0.63063842,
                                          0.6204437 ],
                                        [ 0.59423076,  0.60856859,  0.62123492,  0.63063842,  0.63546702,
                                          0.63022993],
                                        [ 0.57774009,  0.59291616,  0.60756939,  0.6204437 ,  0.63022993,
                                          0.63585594]],
                                       [[ 0.59671367,  0.58858921,  0.57887393,  0.56789493,  0.55622536,
                                          0.54493686],
                                        [ 0.58858921,  0.59017153,  0.58401459,  0.57539874,  0.56511039,
                                          0.55447382],
                                        [ 0.57887393,  0.58401459,  0.58692202,  0.5816169 ,  0.57362652,
                                          0.56432802],
                                        [ 0.56789493,  0.57539874,  0.5816169 ,  0.58512894,  0.58035164,
                                          0.57324497],
                                        [ 0.55622536,  0.56511039,  0.57362652,  0.58035164,  0.58435121,
                                          0.58042963],
                                        [ 0.54493686,  0.55447382,  0.56432802,  0.57324497,  0.58042963,
                                          0.58566062]],
                                       [[ 0.51839646,  0.37633866,  0.25702216,  0.22437839,  0.21945568,
                                          0.21661905],
                                        [ 0.37633866,  0.49707148,  0.40557244,  0.33351306,  0.31141008,
                                          0.30178033],
                                        [ 0.25702216,  0.40557244,  0.53094752,  0.47205949,  0.41722306,
                                          0.39060906],
                                        [ 0.22437839,  0.33351306,  0.47205949,  0.56498706,  0.52462606,
                                          0.48023475],
                                        [ 0.21945568,  0.31141008,  0.41722306,  0.52462606,  0.57840123,
                                          0.54943584],
                                        [ 0.21661905,  0.30178033,  0.39060906,  0.48023475,  0.54943584,
                                          0.58775398]],
                                       [[ 0.30142226,  0.27099633,  0.22758715,  0.18676819,  0.15199422,
                                          0.12468335],
                                        [ 0.27099633,  0.29814561,  0.27800109,  0.23774379,  0.19747851,
                                          0.16366585],
                                        [ 0.22758715,  0.27800109,  0.31772445,  0.30125366,  0.26099416,
                                          0.22161212],
                                        [ 0.18676819,  0.23774379,  0.30125366,  0.34577352,  0.32950597,
                                          0.29005372],
                                        [ 0.15199422,  0.19747851,  0.26099416,  0.32950597,  0.37500076,
                                          0.36042452],
                                        [ 0.12468335,  0.16366585,  0.22161212,  0.29005372,  0.36042452,
                                          0.41108307]],
                                       [[ 1.27550768,  1.22777051,  1.16268548,  1.11182965,  1.06790407,
                                          1.03075598],
                                        [ 1.22777051,  1.29757122,  1.26491216,  1.20978007,  1.15891128,
                                          1.11610421],
                                        [ 1.16268548,  1.26491216,  1.33441382,  1.30956087,  1.26141405,
                                          1.21530458],
                                        [ 1.11182965,  1.20978007,  1.30956087,  1.36252485,  1.34305787,
                                          1.30280382],
                                        [ 1.06790407,  1.15891128,  1.26141405,  1.34305787,  1.3850536 ,
                                          1.37058163],
                                        [ 1.03075598,  1.11610421,  1.21530458,  1.30280382,  1.37058163,
                                          1.41020809]],
                                       [[ 0.74258042,  0.69999658,  0.64868609,  0.60264444,  0.56600508,
                                          0.54497398],
                                        [ 0.69999658,  0.71900828,  0.69447255,  0.65242862,  0.61280207,
                                          0.58631624],
                                        [ 0.64868609,  0.69447255,  0.72991139,  0.71376848,  0.67670172,
                                          0.64695267],
                                        [ 0.60264444,  0.65242862,  0.71376848,  0.75791057,  0.74552615,
                                          0.71777741],
                                        [ 0.56600508,  0.61280207,  0.67670172,  0.74552615,  0.79478795,
                                          0.79114233],
                                        [ 0.54497398,  0.58631624,  0.64695267,  0.71777741,  0.79114233,
                                          0.85010162]],
                                       [[ 1.43491157,  1.13459873,  0.78053826,  0.56724255,  0.59556354,
                                          0.68458149],
                                        [ 1.13459873,  1.32034314,  0.91755074,  0.56120969,  0.50861968,
                                          0.59977506],
                                        [ 0.78053826,  0.91755074,  1.14695437,  0.76547429,  0.56870869,
                                          0.58556731],
                                        [ 0.56724255,  0.56120969,  0.76547429,  1.07019916,  0.83894229,
                                          0.74848782],
                                        [ 0.59556354,  0.50861968,  0.56870869,  0.83894229,  1.15652013,
                                          1.03399473],
                                        [ 0.68458149,  0.59977506,  0.58556731,  0.74848782,  1.03399473,
                                          1.27174072]]])
        params["weights"] = array([ 0.00932141,  0.7180921 ,  0.17526221,  0.01115066,  0.03230276,
                                    0.01013556,  0.03966707,  0.00406823])
        super(LoadSampler,self).__init__(params, seas_mean=seas_mean, seas_std=seas_std, T=96)

    def __call__(self, rng, *_):
        return self.scale*super(LoadSampler,self).__call__(rng)/1.0e3 # kW to MW

class SunSampler(object):
    def __init__(self):
        self.past = []
        ##
        self.pi = self._trans_weights.tolist()
        self.mu_a = [np.atleast_1d(self._trans_means[k,-1]) for k in range(self.mixt_size)]
        self.mu_b = [np.atleast_1d(self._trans_means[k,:-1:]) for k in range(self.mixt_size)]
        ##
        sig = [self._trans_covars[k,::,::] for k in range(self.mixt_size)]
        sig_bb = [np.atleast_2d(s[:-1:,:-1:]) for s in sig]
        self.mvns = [multivariate_normal(mean=m_b,cov=s_bb) for (m_b,s_bb) in zip(self.mu_b,sig_bb)]
        ##
        lamb = [np.linalg.inv(self._trans_covars[k,::,::]) for k in range(self.mixt_size)]
        lamb_aa = [np.atleast_2d(l[-1,-1]) for l in lamb]
        lamb_ab = [np.atleast_2d(l[-1,:-1:]) for l in lamb]
        self.cond_mu_prec = [np.linalg.inv(l_aa).dot(l_ab) for (l_aa,l_ab) in zip(lamb_aa,lamb_ab)]
        self.cond_sigsqrt = [np.sqrt(np.linalg.inv(l_aa)) for l_aa in lamb_aa]

    def __call__(self, rng, *_):
        if self.past:
            if self.stds[self._t%self.T] > 0.:
                x_b = np.array(self.past)
                pi_k = [p*mvn.pdf(x_b) for (p,mvn) in zip(self.pi,self.mvns)]
                cond_pi = [p_k/sum(pi_k) for p_k in pi_k]
                cond_mu = [m_a - prec.dot(x_b-m_b) for (m_a,prec,m_b) in zip(self.mu_a,self.cond_mu_prec,self.mu_b)]
                cum_cond_pi = np.array([sum(cond_pi[:k:]) for k in range(self.mixt_size)])
                rand_k = (cum_cond_pi < rng.rand()).nonzero()[0][-1]
                x_a = self.cond_sigsqrt[rand_k]*rng.randn()+cond_mu[rand_k]

                self.past = self.past[1::] + [x_a[0,0]]
                self._t = (self._t+1) % self.T
            else:
                self.past = self.past[1::] + [0.0]
                self._t = (self._t+1) % self.T
        else:
            self._t = 1 % self.T
            norm_id = np.nonzero(np.cumsum([0.]+self._init_weights.tolist())[:-1:] <= rng.random_sample())[0][-1]
            self.past = rng.multivariate_normal(self._init_means[norm_id],self._init_covars[norm_id]).tolist()

        self.past[-1] = min(max(self.past[-1], (self._lb-self.means[self._t])/np.abs(self.stds[self._t])),(750.0-self.means[self._t])/np.abs(self.stds[self._t]))
        return self.past[-1]*np.abs(self.stds[self._t])+self.means[self._t]

    _init_covars = array([[[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]],
                          [[ 0.001]]])

    _init_means = array([[ 0.],
                         [ 0.],
                         [ 0.],
                         [ 0.],
                         [ 0.],
                         [ 0.],
                         [ 0.],
                         [ 0.],
                         [ 0.],
                         [ 0.]])

    _init_weights = array([ 0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1])
    _trans_covars = array([[[  5.29100468e-02,   4.66281365e-02],
                             [  4.66281365e-02,   5.10545396e-02]],
                            [[  1.53924113e-01,   6.06826425e-02],
                             [  6.06826425e-02,   1.59291273e-01]],
                            [[  3.52882499e-03,   2.08833085e-01],
                             [  2.08833085e-01,   4.11558683e+01]],
                            [[  1.77953262e-01,   1.67298488e-01],
                             [  1.67298488e-01,   1.75761417e-01]],
                            [[  4.49351306e-01,   3.82063799e-01],
                             [  3.82063799e-01,   4.41845660e-01]],
                            [[  1.31563956e+00,   6.59913359e-01],
                             [  6.59913359e-01,   1.25197780e+00]],
                            [[  2.49434165e+01,  -9.51184357e+00],
                             [ -9.51184357e+00,   1.27500555e+01]],
                            [[  2.85754599e-03,   3.34642823e-04],
                             [  3.34642823e-04,   1.50890084e-03]],
                            [[  3.65252610e-01,  -3.54050591e-03],
                             [ -3.54050591e-03,   3.60036422e-01]],
                            [[  3.18999281e-01,   1.15548249e-01],
                             [  1.15548249e-01,   4.24810209e-01]]])

    _trans_means = array([[ 1.1610894 ,  1.16153612],
                           [-0.42594343, -0.40580988],
                           [-0.06575965,  9.59209203],
                           [-0.8371022 , -0.83968888],
                           [ 0.89737048,  0.85923023],
                           [ 1.92185264,  1.88752457],
                           [ 8.86093406,  3.75985555],
                           [-0.03663205, -0.06823992],
                           [ 0.32295457,  0.43470875],
                           [ 0.55791714,  0.44760842]])

    _trans_weights = array([ 0.10494789,  0.10373561,  0.00184417,  0.30592703,  0.09581995,
        0.01680253,  0.00153294,  0.24149121,  0.06735853,  0.06054015])
    _lb = 0.0
    stds = array([  -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    7.35203771e-03,   5.20577289e-03,   5.20577289e-03,
                    1.86877317e-01,   1.33033574e+00,   2.90086215e+00,
                    4.83760849e+00,   6.85443416e+00,   9.22324885e+00,
                    1.17949634e+01,   1.49235189e+01,   1.86025651e+01,
                    2.27996804e+01,   3.00201792e+01,   3.79625379e+01,
                    4.64450706e+01,   5.62484612e+01,   6.47510658e+01,
                    7.52457584e+01,   8.88297912e+01,   9.70577675e+01,
                    1.07437127e+02,   1.15392868e+02,   1.22839999e+02,
                    1.30694962e+02,   1.37303459e+02,   1.43101902e+02,
                    1.51134119e+02,   1.57364435e+02,   1.59559197e+02,
                    1.63540560e+02,   1.65458983e+02,   1.70811420e+02,
                    1.69531199e+02,   1.70625955e+02,   1.71076639e+02,
                    1.71585633e+02,   1.68989335e+02,   1.69097880e+02,
                    1.64403697e+02,   1.59436751e+02,   1.59263700e+02,
                    1.54167132e+02,   1.46858947e+02,   1.40658867e+02,
                    1.31342777e+02,   1.26230713e+02,   1.19089048e+02,
                    1.07695584e+02,   1.01711830e+02,   9.34470763e+01,
                    8.37195605e+01,   7.24666578e+01,   5.95663897e+01,
                    4.74459322e+01,   3.92959577e+01,   3.10819135e+01,
                    2.32461361e+01,   1.75629458e+01,   1.22148387e+01,
                    8.60196434e+00,   5.34169892e+00,   3.04449254e+00,
                    1.54220390e+00,   5.18664435e-01,   1.07168623e-01,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00,
                    -1.00000000e+00, -1.00000000e+00,  -1.00000000e+00])

    means = array([  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     5.43478266e-04,   2.71739133e-04,   2.71739133e-04,
                     2.20108699e-02,   3.91576089e-01,   1.12146740e+00,
                     2.32690219e+00,   4.06250000e+00,   6.61793478e+00,
                     9.60597826e+00,   1.37679348e+01,   1.90021739e+01,
                     2.55527174e+01,   3.58434783e+01,   4.84067936e+01,
                     6.55644022e+01,   8.28663043e+01,   9.85875000e+01,
                     1.16502989e+02,   1.33251359e+02,   1.49025000e+02,
                     1.65901630e+02,   1.83997826e+02,   1.98446740e+02,
                     2.12201087e+02,   2.29911141e+02,   2.43180978e+02,
                     2.53504620e+02,   2.63951087e+02,   2.77215217e+02,
                     2.85099728e+02,   2.86738859e+02,   2.92647010e+02,
                     2.87558152e+02,   2.88089131e+02,   2.86698912e+02,
                     2.89261413e+02,   2.82397282e+02,   2.79711142e+02,
                     2.69864130e+02,   2.59178804e+02,   2.53844022e+02,
                     2.40000000e+02,   2.28305163e+02,   2.12461957e+02,
                     1.98610870e+02,   1.87837228e+02,   1.73866033e+02,
                     1.61081250e+02,   1.49789402e+02,   1.34022826e+02,
                     1.15208152e+02,   9.92888586e+01,   8.04752719e+01,
                     6.26869566e+01,   4.73994565e+01,   3.36380435e+01,
                     2.30119565e+01,   1.53214674e+01,   9.15054347e+00,
                     5.41521740e+00,   2.96956521e+00,   1.34429348e+00,
                     4.90760868e-01,   1.09510869e-01,   1.41304350e-02,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                     0.00000000e+00,   0.00000000e+00,   0.00000000e+00])

    mixt_size = 10
    order = 1
    T = 96